{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/jimmykane/Programming-Projects/Assignment-3-Treevia-Starter/App/Components/Plants.js\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { human } from 'react-native-typography';\nimport { Metrics, Colors } from \"../Themes\";\nimport * as WebBrowser from 'expo-web-browser';\nexport default function Plants(props) {\n  var _this = this;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      result = _useState2[0],\n      setResult = _useState2[1];\n\n  var handlePressButtonAsync = function handlePressButtonAsync(link) {\n    var result;\n    return _regeneratorRuntime.async(function handlePressButtonAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(WebBrowser.openBrowserAsync(link));\n\n          case 2:\n            result = _context.sent;\n            setResult(result);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var renderPlant = function renderPlant(_ref) {\n    var index = _ref.index,\n        item = _ref.item;\n    return React.createElement(TouchableOpacity, {\n      style: styles.container,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.nameHeader,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, item.common_name), React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }\n    }, \"Scientific Name: \", React.createElement(Text, {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 32\n      }\n    }, item.scientific_name)), React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, \"This plant comes from the \", React.createElement(Text, {\n      style: {\n        fontStyle: 'italic'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 41\n      }\n    }, item.family), \" family and the \", React.createElement(Text, {\n      style: {\n        fontStyle: 'italic'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 113\n      }\n    }, item.genus), \" genus\"));\n  };\n\n  return React.createElement(View, {\n    style: styles.flatlist,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, React.createElement(FlatList, {\n    data: props.plants,\n    renderItem: renderPlant,\n    keyExtractor: function keyExtractor(item, index) {\n      return item + index.toString();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  flatlist: {\n    flex: 1,\n    width: \"100%\"\n  },\n  container: {\n    height: 80,\n    width: '100%',\n    backgroundColor: 'lightblue',\n    borderWidth: 1,\n    borderColor: 'black',\n    margin: 5\n  },\n  nameHeader: {\n    fontWeight: 'bold',\n    fontSize: 20\n  }\n});","map":{"version":3,"sources":["/Users/jimmykane/Programming-Projects/Assignment-3-Treevia-Starter/App/Components/Plants.js"],"names":["React","useState","human","Metrics","Colors","WebBrowser","Plants","props","result","setResult","handlePressButtonAsync","link","openBrowserAsync","renderPlant","index","item","styles","container","nameHeader","common_name","fontWeight","scientific_name","fontStyle","family","genus","flatlist","plants","toString","StyleSheet","create","flex","width","height","backgroundColor","borderWidth","borderColor","margin","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { StyleSheet, SafeAreaView, View, FlatList, Text, Linking, ActivityIndicator, TouchableOpacity, Image } from 'react-native'\n// human interface guideline\n// https://github.com/hectahertz/react-native-typography\nimport { human } from 'react-native-typography'\nimport { Metrics, Colors } from '../Themes'\nimport * as WebBrowser from 'expo-web-browser';\n\nexport default function Plants(props) {\n  const [result, setResult] = useState(null);\n\n  const handlePressButtonAsync = async (link) => {\n    let result = await WebBrowser.openBrowserAsync(link);\n    setResult(result);\n  };\n  const renderPlant = ({index, item}) => {\n    return(\n      <TouchableOpacity style={styles.container}>\n        <Text style={styles.nameHeader}>{item.common_name}</Text>\n        <Text>Scientific Name: <Text style={{fontWeight: 'bold'}}>{item.scientific_name}</Text></Text>\n        <Text>This plant comes from the <Text style={{fontStyle: 'italic'}}>{item.family}</Text> family and the <Text style={{fontStyle: 'italic'}}>{item.genus}</Text> genus</Text>\n      </TouchableOpacity>\n    );\n  }\n\n  return (\n    <View style={styles.flatlist}>\n      <FlatList\n        data={props.plants}\n        renderItem={renderPlant}\n        keyExtractor={(item,index) => {\n          return item + index.toString()\n        }}\n      />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  flatlist: {\n    flex: 1,\n    width: \"100%\"\n  },\n  container: {\n    height: 80,\n    width: '100%',\n    backgroundColor: 'lightblue',\n    borderWidth: 1,\n    borderColor: 'black',\n    margin: 5,\n  },\n  nameHeader: {\n    fontWeight: 'bold',\n    fontSize: 20\n    \n  }\n});\n"]},"metadata":{},"sourceType":"module"}