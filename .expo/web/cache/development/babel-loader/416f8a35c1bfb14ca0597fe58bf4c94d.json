{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport AppConfig from \"./AppConfig\";\nimport testData from \"./TestPlantData.json\";\n\nvar queryString = require('query-string');\n\nvar retrieveDataFromAPI = function retrieveDataFromAPI(endpointurl) {\n  var response, responsejson, plants, result, _iterator, _step, plant, image_url, plantobject;\n\n  return _regeneratorRuntime.async(function retrieveDataFromAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log(\"api url: \" + endpointurl);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch(endpointurl));\n\n        case 4:\n          response = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 7:\n          responsejson = _context.sent;\n          plants = responsejson.data;\n          result = [];\n          _iterator = _createForOfIteratorHelperLoose(plants);\n\n        case 11:\n          if ((_step = _iterator()).done) {\n            _context.next = 20;\n            break;\n          }\n\n          plant = _step.value;\n\n          if (!(!plant.common_name || !plant.image_url)) {\n            _context.next = 15;\n            break;\n          }\n\n          return _context.abrupt(\"continue\", 18);\n\n        case 15:\n          image_url = plant.image_url.endsWith('.jpg') ? plant.image_url : plant.image_url + '.jpg';\n          plantobject = {\n            scientific_name: plant.scientific_name,\n            common_name: plant.common_name,\n            family: plant.family,\n            genus: plant.genus,\n            key: plant.slug,\n            image_url: image_url,\n            url: image_url\n          };\n          result.push(plantobject);\n\n        case 18:\n          _context.next = 11;\n          break;\n\n        case 20:\n          return _context.abrupt(\"return\", result);\n\n        case 23:\n          _context.prev = 23;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 23]], Promise);\n};\n\nvar APIRequest = {\n  requestSearchPlants: function requestSearchPlants(searchTerm) {\n    var parameters;\n    return _regeneratorRuntime.async(function requestSearchPlants$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            parameters = {\n              'token': AppConfig.apiKey\n            };\n\n            if (searchTerm) {\n              parameters.q = searchTerm;\n            }\n\n            parameters = queryString.stringify(parameters);\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(retrieveDataFromAPI(AppConfig.plantSearch + '?' + parameters));\n\n          case 5:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  requestPlantList: function requestPlantList(filter) {\n    var parameters;\n    return _regeneratorRuntime.async(function requestPlantList$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            parameters = {\n              'token': AppConfig.apiKey\n            };\n\n            if (filter) {\n              parameters.filter = filter;\n            }\n\n            parameters = queryString.stringify(parameters);\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(retrieveDataFromAPI(AppConfig.plantList + '?' + parameters));\n\n          case 5:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexport default APIRequest;","map":{"version":3,"sources":["/Users/jimmykane/Programming-Projects/Assignment-3-Treevia-Starter/App/Config/APIRequest.js"],"names":["AppConfig","testData","queryString","require","retrieveDataFromAPI","endpointurl","console","log","fetch","response","json","responsejson","plants","data","result","plant","common_name","image_url","endsWith","plantobject","scientific_name","family","genus","key","slug","url","push","APIRequest","requestSearchPlants","searchTerm","parameters","apiKey","q","stringify","plantSearch","requestPlantList","filter","plantList"],"mappings":";;;;;;;;AAAA,OAAOA,SAAP;AACA,OAAOC,QAAP;;AACA,IAAMC,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AAGA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAOC,WAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGxBC,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAcF,WAA1B;AAHwB;AAAA,2CAIDG,KAAK,CAACH,WAAD,CAJJ;;AAAA;AAIlBI,UAAAA,QAJkB;AAAA;AAAA,2CAKCA,QAAQ,CAACC,IAAT,EALD;;AAAA;AAKpBC,UAAAA,YALoB;AAOlBC,UAAAA,MAPkB,GAOTD,YAAY,CAACE,IAPJ;AAYlBC,UAAAA,MAZkB,GAYT,EAZS;AAAA,sDAcJF,MAdI;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcbG,UAAAA,KAda;;AAAA,gBAgBlB,CAACA,KAAK,CAACC,WAAP,IAAsB,CAACD,KAAK,CAACE,SAhBX;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAmBhBA,UAAAA,SAnBgB,GAmBJF,KAAK,CAACE,SAAN,CAAgBC,QAAhB,CAAyB,MAAzB,IAAmCH,KAAK,CAACE,SAAzC,GAAqDF,KAAK,CAACE,SAAN,GAAkB,MAnBnE;AAqBhBE,UAAAA,WArBgB,GAqBF;AAClBC,YAAAA,eAAe,EAAEL,KAAK,CAACK,eADL;AAElBJ,YAAAA,WAAW,EAAED,KAAK,CAACC,WAFD;AAGlBK,YAAAA,MAAM,EAAEN,KAAK,CAACM,MAHI;AAIlBC,YAAAA,KAAK,EAAEP,KAAK,CAACO,KAJK;AAKlBC,YAAAA,GAAG,EAAER,KAAK,CAACS,IALO;AAMlBP,YAAAA,SAAS,EAAEA,SANO;AAOlBQ,YAAAA,GAAG,EAAER;AAPa,WArBE;AA8BtBH,UAAAA,MAAM,CAACY,IAAP,CAAYP,WAAZ;;AA9BsB;AAAA;AAAA;;AAAA;AAAA,2CAiCjBL,MAjCiB;;AAAA;AAAA;AAAA;AAmCxBR,UAAAA,OAAO,CAACC,GAAR;;AAnCwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;;AAwCA,IAAMoB,UAAU,GAAG;AAEjBC,EAAAA,mBAAmB,EAAE,6BAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,YAAAA,UADe,GACF;AAAE,uBAAS9B,SAAS,CAAC+B;AAArB,aADE;;AAEnB,gBAAIF,UAAJ,EAAgB;AACdC,cAAAA,UAAU,CAACE,CAAX,GAAeH,UAAf;AACD;;AACDC,YAAAA,UAAU,GAAG5B,WAAW,CAAC+B,SAAZ,CAAsBH,UAAtB,CAAb;AALmB;AAAA,6CAMN1B,mBAAmB,CAACJ,SAAS,CAACkC,WAAV,GAAwB,GAAxB,GAA8BJ,UAA/B,CANb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFJ;AAWjBK,EAAAA,gBAAgB,EAAE,0BAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZN,YAAAA,UAFY,GAEC;AAAE,uBAAS9B,SAAS,CAAC+B;AAArB,aAFD;;AAGhB,gBAAIK,MAAJ,EAAY;AACVN,cAAAA,UAAU,CAACM,MAAX,GAAoBA,MAApB;AACD;;AACDN,YAAAA,UAAU,GAAG5B,WAAW,CAAC+B,SAAZ,CAAsBH,UAAtB,CAAb;AANgB;AAAA,6CAOH1B,mBAAmB,CAACJ,SAAS,CAACqC,SAAV,GAAsB,GAAtB,GAA4BP,UAA7B,CAPhB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXD,CAAnB;AAsBA,eAAeH,UAAf","sourcesContent":["import AppConfig from './AppConfig'\nimport testData from './TestPlantData.json'\nconst queryString = require('query-string'); //Importing JavaScript library from npm\n\n// this will call the api and return list of objects\nconst retrieveDataFromAPI = async (endpointurl) => {\n  try {\n    // NOT CALLING API BELOW vvvvvv\n    console.log(\"api url: \" + endpointurl)\n    const response = await fetch(endpointurl)\n    let responsejson = await response.json()\n\n    const plants = responsejson.data\n\n    // you can uncomment this line (and comment out lines above)\n    // to get test data without making API calls\n    //const plants = testData.data\n    const result = [];\n\n    for (const plant of plants) {\n      // we want only plants with common names and image url\n      if (!plant.common_name || !plant.image_url) continue;\n\n      // if the image url does not ends with .jpg, then append the file extension\n      const image_url = plant.image_url.endsWith('.jpg') ? plant.image_url : plant.image_url + '.jpg'\n\n      const plantobject = {\n        scientific_name: plant.scientific_name,\n        common_name: plant.common_name,\n        family: plant.family,\n        genus: plant.genus,\n        key: plant.slug,\n        image_url: image_url,\n        url: image_url,\n      }\n      result.push(plantobject);\n    }\n\n    return result;\n  } catch (error) {\n    console.log(error)\n  }\n}\n\n//NOTE: you can mess around with what we're returning here to return whatever you want!\nconst APIRequest = {\n  // call the search API\n  requestSearchPlants: async (searchTerm) => {\n    let parameters = { 'token': AppConfig.apiKey };\n    if (searchTerm) {\n      parameters.q = searchTerm\n    }\n    parameters = queryString.stringify(parameters);\n    return await retrieveDataFromAPI(AppConfig.plantSearch + '?' + parameters)\n  },\n\n  requestPlantList: async (filter) => {\n    // call the plant list API\n    let parameters = { 'token': AppConfig.apiKey };\n    if (filter) {\n      parameters.filter = filter\n    }\n    parameters = queryString.stringify(parameters);\n    return await retrieveDataFromAPI(AppConfig.plantList + '?' + parameters)\n    \n  },\n}\nexport default APIRequest;\n"]},"metadata":{},"sourceType":"module"}