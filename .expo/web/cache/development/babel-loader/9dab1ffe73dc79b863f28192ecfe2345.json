{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/jimmykane/Programming-Projects/Assignment-3-Treevia-Starter/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Images, Colors, Metrics } from \"./App/Themes\";\nimport APIRequest from \"./App/Config/APIRequest\";\nimport Plants from \"./App/Components/Plants\";\nimport Search from \"./App/Components/Search\";\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      plants = _useState4[0],\n      setPlants = _useState4[1];\n\n  var loadPlants = function loadPlants() {\n    var plantSearch,\n        plantFilter,\n        results,\n        _args = arguments;\n    return _regeneratorRuntime.async(function loadPlants$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            plantSearch = _args.length > 0 && _args[0] !== undefined ? _args[0] : '';\n            plantFilter = _args.length > 1 && _args[1] !== undefined ? _args[1] : '';\n            setLoading(true);\n            setPlants([]);\n            results = [];\n\n            if (!(plantSearch !== '')) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(APIRequest.requestSearchPlants(plantSearch));\n\n          case 8:\n            results = _context.sent;\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(APIRequest.requestPlantList(plantFilter));\n\n          case 13:\n            results = _context.sent;\n\n          case 14:\n            console.log(results);\n            setLoading(false);\n            setPlants(results);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    loadPlants();\n  }, []);\n  return React.createElement(SafeAreaView, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.logoContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, React.createElement(Image, {\n    style: styles.logo,\n    source: Images.logo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  })), React.createElement(Search, {\n    style: styles.searchBar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }), React.createElement(Plants, {\n    style: styles.plantList,\n    plants: plants,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 1\n    }\n  }, \"hello\"));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    justifyContent: 'center',\n    alignItems: 'stretch'\n  },\n  logoContainer: {\n    borderWidth: 1,\n    borderColor: Colors.bloodOrange\n  },\n  logo: {\n    width: Metrics.screenWidth * 0.5,\n    height: Metrics.screenWidth * 0.25,\n    resizeMode: 'contain'\n  },\n  searchBar: {\n    flex: 1,\n    width: Metrics.screenWidth\n  },\n  plantList: {\n    flex: 3,\n    borderWidth: 2\n  }\n});","map":{"version":3,"sources":["/Users/jimmykane/Programming-Projects/Assignment-3-Treevia-Starter/App.js"],"names":["React","useState","useEffect","Images","Colors","Metrics","APIRequest","Plants","Search","App","loading","setLoading","plants","setPlants","loadPlants","plantSearch","plantFilter","results","requestSearchPlants","requestPlantList","console","log","styles","container","logoContainer","logo","searchBar","plantList","StyleSheet","create","flex","backgroundColor","justifyContent","alignItems","borderWidth","borderColor","bloodOrange","width","screenWidth","height","resizeMode"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, SafeAreaView, ActivityIndicator, Image } from 'react-native';\nimport { Images, Colors, Metrics } from './App/Themes'\nimport APIRequest from './App/Config/APIRequest'\n\nimport Plants from './App/Components/Plants'\nimport Search from './App/Components/Search'\n\nexport default function App() {\n\n  const [loading, setLoading] = useState(false);\n  const [plants, setPlants] = useState([]);\n \n\n  // retrieve lists of plants\n  const loadPlants = async (plantSearch = '', plantFilter = '') => {\n    setLoading(true);\n    setPlants([]);\n    let results = [];\n    // if there is no search term, then get list of plants\n    if (plantSearch !== '') {\n      results = await APIRequest.requestSearchPlants(plantSearch);\n    } else {\n      results = await APIRequest.requestPlantList(plantFilter);\n    }\n    console.log(results);\n    setLoading(false);\n    setPlants(results);\n  }\n\n  useEffect(() => { loadPlants() }, []);\n\n\n  return (\n    <SafeAreaView style={styles.container}>\n\n      {/* First, the logo */}\n      <View style={styles.logoContainer}>\n        <Image style={styles.logo} source={Images.logo}/>\n      </View>\n\n      {/* Then the search bar */}\n      <Search style={styles.searchBar} ></Search>\n      {/* And some plants */}\n      <Plants style={styles.plantList} plants={plants}></Plants>\n\n      {/* You can style and organize these however you want */}\n\n      {/* Also, checkout the \"./App/Config/APIRequest.js\", if you want custom API calls or use test data*/}\n<Text>hello</Text>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    justifyContent: 'center',\n    alignItems: 'stretch'\n  },\n  logoContainer: {\n\n    borderWidth: 1,\n    borderColor: Colors.bloodOrange\n\n  },\n  logo: {\n    width: Metrics.screenWidth * 0.5,\n    height: Metrics.screenWidth * 0.25,\n    resizeMode: 'contain'\n  },\n  searchBar: {\n    flex: 1,\n    width: Metrics.screenWidth,\n  },\n  plantList: {\n    flex: 3,\n    borderWidth: 2\n  }\n});\n"]},"metadata":{},"sourceType":"module"}